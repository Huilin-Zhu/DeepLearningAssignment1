{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Assignment 1 (TF 2).ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "machine_shape": "hm"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7uut_aem5B5q",
        "colab_type": "text"
      },
      "source": [
        "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/satyaki-mallick/DeepLearningAssignment1/blob/master/Assignment_1.ipynb#scrollTo=7uut_aem5B5q)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "7ORVPadj7rKq"
      },
      "source": [
        "# Assignment 1\n",
        "\n",
        "<b>Group [fill in group number]</b>\n",
        "* <b> Student 1 </b> : SATYAKI MALLICK + 1410881\n",
        "* <b> Student 2 </b> : HUILIN ZHU+ 1378627\n",
        "\n",
        "**Reading material**\n",
        "* [1] Mikolov, Tomas, et al. \"[Efficient Estimation of Word Representations in Vector Space](https://arxiv.org/abs/1301.3781)\" Advances in neural information processing systems. 2013. \n",
        "\n",
        "<b><font color='red'>NOTE</font></b> When submitting your notebook, please make sure that the training history of your model is visible in the output. This means that you should **NOT** clean your output cells of the notebook. Make sure that your notebook runs without errors in linear order.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "6rQwLyiMFu_1"
      },
      "source": [
        "# Question 1 - Keras implementation (10 pt)\n",
        "\n",
        "### Word embeddings\n",
        "Build word embeddings with a Keras implementation where the embedding vector is of length 50, 150 and 300. Use the Alice in Wonderland text book for training. Use a window size of 2 to train the embeddings (`window_size` in the jupyter notebook). \n",
        "\n",
        "1. Build word embeddings of length 50, 150 and 300 using the Skipgram model\n",
        "2. Build word embeddings of length 50, 150 and 300 using CBOW model\n",
        "3. Analyze the different word embeddings:\n",
        "    - Implement your own function to perform the analogy task (see [1] for concrete examples). Use the same distance metric as in the paper. Do not use existing libraries for this task such as Gensim. \n",
        "Your function should be able to answer whether an analogy like: \"a king is to a queen as a man is to a woman\" ($e_{king} - e_{queen} + e_{woman} \\approx e_{man}$) is true. $e_{x}$ denotes the embedding of word $x$. We want to find the word $p$ in the vocabulary, where the embedding of $p$ ($e_p$) is the closest to the predicted embedding (i.e. result of the formula). Then, we can check if $p$ is the same word as the true word $t$.\n",
        "    - Give at least 5 different  examples of analogies.\n",
        "    - Compare the performance on the analogy tasks between the word embeddings and briefly discuss your results.\n",
        "\n",
        "4. Discuss:\n",
        "  - Given the same number of sentences as input, CBOW and Skipgram arrange the data into different number of training samples. Which one has more and why?\n",
        "\n",
        "\n",
        "<b>HINT</b> See practical 3.1 for some helpful code to start this assignment.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "ctoyAoX1AI6T"
      },
      "source": [
        "### Import libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "x5VOelR7BYQ1",
        "colab": {}
      },
      "source": [
        "%tensorflow_version 2.x"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "vCnATRPgBZEd",
        "outputId": "a95cc8f0-81f1-4152-a6f4-39f79693ab9f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "import numpy as np\n",
        "import keras.backend as K\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Embedding, Reshape, Lambda\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.utils import plot_model\n",
        "from tensorflow.keras.preprocessing import sequence\n",
        "\n",
        "# other helpful libraries\n",
        "from sklearn.manifold import TSNE\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from sklearn.neighbors import NearestNeighbors as nn\n",
        "from matplotlib import pylab\n",
        "import pandas as pd"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "qBNCPtOoBbB1",
        "outputId": "06a1dbdc-205d-49fc-c8d9-2ca0c4299ca2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print(tf.__version__) #  check what version of TF is imported"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2.2.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "WCd0zUO1AKjY"
      },
      "source": [
        "### Import file\n",
        "\n",
        "If you use Google Colab, you need to mount your Google Drive to the notebook when you want to use files that are located in your Google Drive. Paste the authorization code, from the new tab page that opens automatically when running the cell, in the cell below."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "DdjNeehKBd-a",
        "outputId": "2b293626-2c1e-4b71-c00d-c33290f9b37e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "UjIVBt8YGUaO"
      },
      "source": [
        "Navigate to the folder in which `alice.txt` is located. Make sure to start path with '/content/drive/My Drive/' if you want to load the file from your Google Drive."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "iS0-uINUBfic",
        "outputId": "a0763b0c-6d94-4b0a-b39a-9991c844e295",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "cd '/content/drive/My Drive/Colab Notebooks/'"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/drive/My Drive/Colab Notebooks\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3DEvNncnXEGj",
        "colab_type": "code",
        "outputId": "8dd1a358-0a33-4aba-8048-58c38909debe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "cd '/content/drive/My Drive/Colab Notebooks/DeepLearning/Practical3'"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[Errno 2] No such file or directory: '/content/drive/My Drive/Colab Notebooks/DeepLearning/Practical3'\n",
            "/content/drive/My Drive/Colab Notebooks\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Gz8Z5gCDBhSl",
        "colab": {}
      },
      "source": [
        "file_name = 'alice.txt'\n",
        "corpus = open(file_name).readlines()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "zkbk32wHANnD"
      },
      "source": [
        "### Data preprocessing\n",
        "\n",
        "See Practical 3.1 for an explanation of the preprocessing steps done below."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "37PyOHq2BkY4",
        "colab": {}
      },
      "source": [
        "# Removes sentences with fewer than 3 words\n",
        "corpus = [sentence for sentence in corpus if sentence.count(\" \") >= 2]\n",
        "\n",
        "# remove punctuation in text and fit tokenizer on entire corpus\n",
        "tokenizer = Tokenizer(filters='!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n'+\"'\")\n",
        "tokenizer.fit_on_texts(corpus)\n",
        "\n",
        "# convert text to sequence of integer values\n",
        "corpus = tokenizer.texts_to_sequences(corpus)\n",
        "n_samples = sum(len(s) for s in corpus) # total number of words in the corpus\n",
        "V = len(tokenizer.word_index) + 1 # total number of unique words in the corpus"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "ILdA_IimBlte",
        "outputId": "f0188cb7-3fb1-4ea5-d3b6-60e0567d4d2d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "n_samples, V"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(27165, 2557)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "fRbpue0WBms6",
        "outputId": "b871810a-8e47-4de2-d295-ae2dd68604a1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# example of how word to integer mapping looks like in the tokenizer\n",
        "print(list((tokenizer.word_index.items()))[:5])"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[('the', 1), ('and', 2), ('to', 3), ('a', 4), ('it', 5)]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Er86VxH9BqI9",
        "colab": {}
      },
      "source": [
        "# parameters\n",
        "window_size = 2\n",
        "window_size_corpus = 4"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qc_S3hY2EamG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# def save_embeddings_old(model, model_name):\n",
        "#   weights = model.get_weights()\n",
        "#   embedding = weights[0]\n",
        "#   f = open(model_name + '.txt', 'w')\n",
        "#   f.write(\" \".join([str(V-1), str(dim)]))\n",
        "#   f.write(\"\\n\")\n",
        "\n",
        "#   for word,i in tokenizer.word_index.items():\n",
        "#     f.write(word)\n",
        "#     f.write(\" \")\n",
        "#     f.write(\" \".join(map(str, list(embedding[i,:]))))\n",
        "#     f.write(\"\\n\")\n",
        "#   f.close()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LVUwWvbBBzJv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def save_embeddings(model, model_name):\n",
        "  weights = model.get_weights()\n",
        "  embedding = weights[0]\n",
        "  np.savetxt('new_' + model_name + '.txt',embedding)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "M0sU1JORATvX"
      },
      "source": [
        "## Task 1.1 - Skipgram\n",
        "Build word embeddings of length 50, 150 and 300 using the Skipgram model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "Udp1xKcDBu0v",
        "colab": {}
      },
      "source": [
        "#prepare data for skipgram\n",
        "def generate_data_skipgram(corpus, window_size, V):\n",
        "    # TODO Implement here\n",
        "    # HINT: see Practical 3.1\n",
        "    maxlen = window_size*2\n",
        "    all_in = []\n",
        "    all_out = []\n",
        "    for words in corpus:\n",
        "        L = len(words)\n",
        "        for index, word in enumerate(words):\n",
        "            p = index - window_size\n",
        "            n = index + window_size + 1\n",
        "                    \n",
        "            in_words = []\n",
        "            labels = []\n",
        "            for i in range(p, n):\n",
        "                if i != index and 0 <= i < L:\n",
        "                    # Add the input word\n",
        "                    #in_words.append(word)\n",
        "                    all_in.append(word)\n",
        "                    # Add one-hot of the context words\n",
        "                    all_out.append(to_categorical(words[i], V))\n",
        "                                      \n",
        "    return (np.array(all_in),np.array(all_out))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "qXBGNrKTB0tO",
        "colab": {}
      },
      "source": [
        "# create training data\n",
        "x_skipgram , y_skipgram = generate_data_skipgram(corpus,window_size,V)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VhOEHUygm7y3",
        "colab_type": "code",
        "outputId": "5da95ff0-2403-4e76-d4a4-950e47efcc1a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "x_skipgram.shape, y_skipgram.shape"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((94556,), (94556, 2557))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "J1FTkStoDLFQ",
        "colab": {}
      },
      "source": [
        "def skipgram_architechture(dim):\n",
        "  model = Sequential()\n",
        "  model.add(Embedding(input_dim=V, output_dim=dim, input_length=1, embeddings_initializer='glorot_uniform'))\n",
        "  # not sure about the input length\n",
        "  #model.add(Reshape((94556,), input_shape=(1,94556)))\n",
        "  # above line or below line\n",
        "  model.add(Reshape((dim,)))\n",
        "  model.add(Dense(V, activation='softmax', kernel_initializer='glorot_uniform'))\n",
        "  model.compile(optimizer='adadelta',\n",
        "                  loss='categorical_crossentropy',\n",
        "                  metrics=['accuracy'])\n",
        "  return model"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gHcXjkGZFkm9",
        "colab_type": "text"
      },
      "source": [
        "### Skipgram for Embedding Vector Length 50"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BJX9ht7X3se7",
        "colab_type": "code",
        "outputId": "e2632cb6-4173-4973-d236-611287ebe610",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        }
      },
      "source": [
        "dim = 50\n",
        "skipgram50 = skipgram_architechture(dim)\n",
        "skipgram50.summary()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding (Embedding)        (None, 1, 50)             127850    \n",
            "_________________________________________________________________\n",
            "reshape (Reshape)            (None, 50)                0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 2557)              130407    \n",
            "=================================================================\n",
            "Total params: 258,257\n",
            "Trainable params: 258,257\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "yxb3ulOlD1Z2"
      },
      "source": [
        "<b>HINT</b>: To increase training speed of your model, you can use the free available GPU power in Google Colab. Go to `Edit` --> `Notebook Settings` --> select `GPU` under `hardware accelerator`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "a9eg0xPoDP9B",
        "outputId": "dc840e7d-6e98-41ff-8689-88f444ef0cdc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        }
      },
      "source": [
        "# train skipgram model\n",
        "skipgram50.fit(x_skipgram, y_skipgram, batch_size=64, epochs=10)\n",
        "save_embeddings(skipgram50, 'skipgram_{dim}'.format(dim=dim))"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "1478/1478 [==============================] - 8s 5ms/step - loss: 7.8463 - accuracy: 3.2785e-04\n",
            "Epoch 2/10\n",
            "1478/1478 [==============================] - 8s 5ms/step - loss: 7.8455 - accuracy: 8.9894e-04\n",
            "Epoch 3/10\n",
            "1478/1478 [==============================] - 8s 5ms/step - loss: 7.8446 - accuracy: 0.0024\n",
            "Epoch 4/10\n",
            "1478/1478 [==============================] - 8s 6ms/step - loss: 7.8438 - accuracy: 0.0040\n",
            "Epoch 5/10\n",
            "1478/1478 [==============================] - 8s 6ms/step - loss: 7.8430 - accuracy: 0.0071\n",
            "Epoch 6/10\n",
            "1478/1478 [==============================] - 8s 5ms/step - loss: 7.8421 - accuracy: 0.0150\n",
            "Epoch 7/10\n",
            "1478/1478 [==============================] - 8s 5ms/step - loss: 7.8413 - accuracy: 0.0203\n",
            "Epoch 8/10\n",
            "1478/1478 [==============================] - 8s 5ms/step - loss: 7.8404 - accuracy: 0.0264\n",
            "Epoch 9/10\n",
            "1478/1478 [==============================] - 8s 5ms/step - loss: 7.8396 - accuracy: 0.0320\n",
            "Epoch 10/10\n",
            "1478/1478 [==============================] - 8s 5ms/step - loss: 7.8388 - accuracy: 0.0354\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yip30sMdF89H",
        "colab_type": "text"
      },
      "source": [
        "### Skipgram for embedding vector length 150"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "eGEHlkQ4DShO",
        "outputId": "8d2e5fdc-8a8b-43e1-82c9-b3d4ef44b4f2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 595
        }
      },
      "source": [
        "# save embeddings for vectors of length 50, 150 and 300 using skipgram model\n",
        "dim = 150\n",
        "skipgram150 = skipgram_architechture(dim)\n",
        "skipgram150.summary()\n",
        "skipgram150.fit(x_skipgram, y_skipgram, batch_size=64, epochs=10)\n",
        "save_embeddings(skipgram150, 'skipgram_{dim}'.format(dim=dim))\n"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_1 (Embedding)      (None, 1, 150)            383550    \n",
            "_________________________________________________________________\n",
            "reshape_1 (Reshape)          (None, 150)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 2557)              386107    \n",
            "=================================================================\n",
            "Total params: 769,657\n",
            "Trainable params: 769,657\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/10\n",
            "1478/1478 [==============================] - 9s 6ms/step - loss: 7.8463 - accuracy: 2.4324e-04\n",
            "Epoch 2/10\n",
            "1478/1478 [==============================] - 8s 6ms/step - loss: 7.8454 - accuracy: 3.3842e-04\n",
            "Epoch 3/10\n",
            "1478/1478 [==============================] - 8s 6ms/step - loss: 7.8445 - accuracy: 6.0282e-04\n",
            "Epoch 4/10\n",
            "1478/1478 [==============================] - 8s 6ms/step - loss: 7.8437 - accuracy: 0.0016\n",
            "Epoch 5/10\n",
            "1478/1478 [==============================] - 8s 6ms/step - loss: 7.8428 - accuracy: 0.0019\n",
            "Epoch 6/10\n",
            "1478/1478 [==============================] - 9s 6ms/step - loss: 7.8419 - accuracy: 0.0033\n",
            "Epoch 7/10\n",
            "1478/1478 [==============================] - 8s 6ms/step - loss: 7.8411 - accuracy: 0.0046\n",
            "Epoch 8/10\n",
            "1478/1478 [==============================] - 8s 6ms/step - loss: 7.8402 - accuracy: 0.0079\n",
            "Epoch 9/10\n",
            "1478/1478 [==============================] - 8s 6ms/step - loss: 7.8393 - accuracy: 0.0105\n",
            "Epoch 10/10\n",
            "1478/1478 [==============================] - 9s 6ms/step - loss: 7.8385 - accuracy: 0.0167\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9zxqAAvIFzNI",
        "colab_type": "text"
      },
      "source": [
        "### Skipgram for embedding vector length 300"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U0ahwbVAFOUU",
        "colab_type": "code",
        "outputId": "4b485f8e-4509-47d7-a449-b9e0a50f2d6c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        }
      },
      "source": [
        "dim = 300\n",
        "skipgram300 = skipgram_architechture(dim)\n",
        "skipgram300.fit(x_skipgram, y_skipgram, batch_size=32, epochs=10)\n",
        "save_embeddings(skipgram300, 'skipgram_{dim}'.format(dim=dim))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "2955/2955 [==============================] - 17s 6ms/step - loss: 7.8461 - accuracy: 3.9130e-04\n",
            "Epoch 2/10\n",
            "2955/2955 [==============================] - 17s 6ms/step - loss: 7.8446 - accuracy: 0.0018\n",
            "Epoch 3/10\n",
            "2955/2955 [==============================] - 18s 6ms/step - loss: 7.8431 - accuracy: 0.0038\n",
            "Epoch 4/10\n",
            "2955/2955 [==============================] - 17s 6ms/step - loss: 7.8417 - accuracy: 0.0043\n",
            "Epoch 5/10\n",
            "2955/2955 [==============================] - 17s 6ms/step - loss: 7.8402 - accuracy: 0.0050\n",
            "Epoch 6/10\n",
            "2955/2955 [==============================] - 17s 6ms/step - loss: 7.8387 - accuracy: 0.0068\n",
            "Epoch 7/10\n",
            "2955/2955 [==============================] - 17s 6ms/step - loss: 7.8373 - accuracy: 0.0104\n",
            "Epoch 8/10\n",
            "2955/2955 [==============================] - 17s 6ms/step - loss: 7.8358 - accuracy: 0.0170\n",
            "Epoch 9/10\n",
            "2955/2955 [==============================] - 17s 6ms/step - loss: 7.8343 - accuracy: 0.0214\n",
            "Epoch 10/10\n",
            "2955/2955 [==============================] - 17s 6ms/step - loss: 7.8329 - accuracy: 0.0273\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "b4z9Lt6pAZEw"
      },
      "source": [
        "## Task 1.2 - CBOW\n",
        "\n",
        "Build word embeddings of length 50, 150 and 300 using CBOW model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "KMhI_sWFTXDW",
        "colab": {}
      },
      "source": [
        "# prepare data for CBOW\n",
        "\n",
        "# create training data\n",
        "\n",
        "# create CBOW architecture\n",
        "\n",
        "# train CBOW model\n",
        "\n",
        "# save embeddings for vectors of length 50, 150 and 300 using CBOW model"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GZMJwlS7dETh",
        "colab_type": "text"
      },
      "source": [
        "Prepare data for CBOW\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DZmhahwTdR_d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def generate_data_CBOW(corpus, window_size, V):\n",
        "    maxlen = window_size*2\n",
        "    all_in = []\n",
        "    all_out = [] #one real label wt\n",
        "    for line in corpus:\n",
        "        sentence_length = len(line)\n",
        "      \n",
        "        for index, word in enumerate(line):  #for each word in the line, we create a little neighborhood [left,right]\n",
        "            left = index - window_size\n",
        "            right = index + window_size + 1\n",
        "      \n",
        "            in_words = []   #neighbor words of wt, used as input to predict wt       \n",
        "      \n",
        "            for i in range(left, right):\n",
        "                if 0 <= i < sentence_length and i != index:\n",
        "                    # Add the input word\n",
        "                    in_words.append(line[i])\n",
        "\n",
        "            \n",
        "            all_in.append(in_words)\n",
        "            all_out.append(to_categorical(word,V))\n",
        "      \n",
        "    all_in = sequence.pad_sequences(all_in, maxlen=maxlen)\n",
        "                                      \n",
        "    return (np.array(all_in),np.array(all_out))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fQqNXVdPddWg",
        "colab_type": "text"
      },
      "source": [
        "Create training data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "28BDAMUxdh_G",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x , y = generate_data_CBOW(corpus,window_size,V)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zdMpla_JR4b6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "84d8b124-d50e-4c94-f538-f97849f00a63"
      },
      "source": [
        "x.shape, y.shape"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((27165, 4), (27165, 2557))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Iswy4EU3gr12",
        "colab_type": "text"
      },
      "source": [
        "Create CBOW architecture"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "du7xuYdIgw6P",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def cbow_architechture(dim):\n",
        "    cbow = Sequential()\n",
        "    cbow.add(Embedding(input_dim=V, output_dim=dim, embeddings_initializer='glorot_uniform', input_length=window_size*2))\n",
        "    cbow.add(Lambda(lambda x: K.mean(x, axis=1), output_shape=(dim,)))\n",
        "    cbow.add(Dense(V, kernel_initializer='glorot_uniform', activation='softmax'))\n",
        "    #multiclass classification->categorical_crossentropy loss, optimizer->PPT02 p24\n",
        "    cbow.compile(loss='categorical_crossentropy', optimizer='adadelta', metrics=['accuracy'])\n",
        "    return cbow"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DNfaATp3g1Y0",
        "colab_type": "text"
      },
      "source": [
        "###CBOW for Embedding Vector Length 50"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HqtHGSsTG45-",
        "colab_type": "text"
      },
      "source": [
        "Train CBOW model - embedding vector length 50"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JqGNiCVyhy65",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# dimension of word embedding\n",
        "dim = 50\n",
        "\n",
        "cbow = cbow_architechture(dim)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IyZhcahTiKV2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        },
        "outputId": "5dbfda19-3291-4076-a4c2-d227a9d72931"
      },
      "source": [
        "plot_model(cbow, show_shapes = True, show_layer_names=False)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GFiw8wiAiUo8",
        "colab_type": "code",
        "outputId": "1e927381-791e-4d39-ad4c-47473b5fc1fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        }
      },
      "source": [
        "cbow.summary()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_3\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_3 (Embedding)      (None, 4, 50)             127850    \n",
            "_________________________________________________________________\n",
            "lambda (Lambda)              (None, 50)                0         \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 2557)              130407    \n",
            "=================================================================\n",
            "Total params: 258,257\n",
            "Trainable params: 258,257\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9qoQ_z3XiW2G",
        "colab_type": "code",
        "outputId": "39e7ea28-2f2e-423b-b010-fd202740345a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        }
      },
      "source": [
        "# train skipgram model\n",
        "cbow.fit(x, y, batch_size=64, epochs=10, verbose=1)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8465 - accuracy: 3.6812e-04\n",
            "Epoch 2/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8462 - accuracy: 5.1537e-04\n",
            "Epoch 3/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8460 - accuracy: 6.9943e-04\n",
            "Epoch 4/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8457 - accuracy: 0.0018\n",
            "Epoch 5/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8455 - accuracy: 0.0025\n",
            "Epoch 6/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8453 - accuracy: 0.0041\n",
            "Epoch 7/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8450 - accuracy: 0.0064\n",
            "Epoch 8/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8448 - accuracy: 0.0096\n",
            "Epoch 9/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8445 - accuracy: 0.0133\n",
            "Epoch 10/10\n",
            "425/425 [==============================] - 2s 6ms/step - loss: 7.8443 - accuracy: 0.0171\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f89230de748>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1n_XLpoSizLy",
        "colab_type": "text"
      },
      "source": [
        "Save embedding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DFa9ypDURn1q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_embeddings(cbow, 'cbow_{dim}'.format(dim=dim))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6hIlAEr9G_sb",
        "colab_type": "text"
      },
      "source": [
        "###CBOW for Embedding Vector Length 150"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "xhQJ-pOgjrp4"
      },
      "source": [
        "Train CBOW model - embedding vector length 150"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BVb7BxTdjoyp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# dimension of word embedding\n",
        "dim = 150\n",
        "\n",
        "cbow = cbow_architechture(dim)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FginlQRMj4aQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        },
        "outputId": "70b18c02-0459-424d-cfc3-12b12c0c63b4"
      },
      "source": [
        "plot_model(cbow, show_shapes = True, show_layer_names=False)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bi7D2JxNj7qX",
        "colab_type": "code",
        "outputId": "a7ebc3c9-34b6-4514-e06c-76459427873b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        }
      },
      "source": [
        "cbow.summary()"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_4 (Embedding)      (None, 4, 150)            383550    \n",
            "_________________________________________________________________\n",
            "lambda_1 (Lambda)            (None, 150)               0         \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 2557)              386107    \n",
            "=================================================================\n",
            "Total params: 769,657\n",
            "Trainable params: 769,657\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "19djsLqij_dq",
        "colab_type": "code",
        "outputId": "0d1855ff-af11-4659-8e9c-73622ccf34cc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        }
      },
      "source": [
        "# train skipgram model\n",
        "cbow.fit(x, y, batch_size=64, epochs=10, verbose=1)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8468 - accuracy: 4.4174e-04\n",
            "Epoch 2/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8466 - accuracy: 5.5218e-04\n",
            "Epoch 3/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8464 - accuracy: 5.8899e-04\n",
            "Epoch 4/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8461 - accuracy: 6.2581e-04\n",
            "Epoch 5/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8459 - accuracy: 8.4668e-04\n",
            "Epoch 6/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8456 - accuracy: 0.0011\n",
            "Epoch 7/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8454 - accuracy: 0.0016\n",
            "Epoch 8/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8451 - accuracy: 0.0021\n",
            "Epoch 9/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8448 - accuracy: 0.0027\n",
            "Epoch 10/10\n",
            "425/425 [==============================] - 3s 6ms/step - loss: 7.8446 - accuracy: 0.0033\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f88c53cc128>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "snC7VXXHj2nO",
        "colab_type": "text"
      },
      "source": [
        "Save embedding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xGpTElB1kHh7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_embeddings(cbow, 'cbow_{dim}'.format(dim=dim))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PiVIWzmDHG9t",
        "colab_type": "text"
      },
      "source": [
        "###CBOW for Embedding Vector Length 300"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "vVnwNWvpkPNd"
      },
      "source": [
        "Train CBOW model - embedding vector length 300"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tqJZJ7oGkRNN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# dimension of word embedding\n",
        "dim = 300\n",
        "\n",
        "cbow = cbow_architechture(dim)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-UXwCXe9oM1A",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        },
        "outputId": "ec4e20eb-6742-4395-8fdd-6b87d73884cb"
      },
      "source": [
        "plot_model(cbow, show_shapes = True, show_layer_names=False)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D5uo15a5oR9N",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "fffe75f6-ba46-42ee-c638-c13346ecec34"
      },
      "source": [
        "cbow.summary()"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_5\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_5 (Embedding)      (None, 4, 300)            767100    \n",
            "_________________________________________________________________\n",
            "lambda_2 (Lambda)            (None, 300)               0         \n",
            "_________________________________________________________________\n",
            "dense_5 (Dense)              (None, 2557)              769657    \n",
            "=================================================================\n",
            "Total params: 1,536,757\n",
            "Trainable params: 1,536,757\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JVRh42vmoUmP",
        "colab_type": "code",
        "outputId": "c77c9c65-ac7d-4f99-b179-2d8aec036300",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        }
      },
      "source": [
        "# train skipgram model\n",
        "cbow.fit(x, y, batch_size=64, epochs=10, verbose=1)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8464 - accuracy: 4.0493e-04\n",
            "Epoch 2/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8462 - accuracy: 6.2581e-04\n",
            "Epoch 3/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8459 - accuracy: 7.7305e-04\n",
            "Epoch 4/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8456 - accuracy: 8.4668e-04\n",
            "Epoch 5/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8453 - accuracy: 0.0012\n",
            "Epoch 6/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8451 - accuracy: 0.0016\n",
            "Epoch 7/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8448 - accuracy: 0.0018\n",
            "Epoch 8/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8445 - accuracy: 0.0025\n",
            "Epoch 9/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8443 - accuracy: 0.0032\n",
            "Epoch 10/10\n",
            "425/425 [==============================] - 3s 7ms/step - loss: 7.8440 - accuracy: 0.0040\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f88c525e8d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EuCa4_ILoX1K",
        "colab_type": "text"
      },
      "source": [
        "Save embedding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hGM8z6adGoE5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_embeddings(cbow, 'cbow_{dim}'.format(dim=dim))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "rr2BAI4nAfnG"
      },
      "source": [
        "## Task 1.3 - Analogy function\n",
        "\n",
        "Implement your own function to perform the analogy task (see [1] for concrete examples). Use the same distance metric as in [1]. Do not use existing libraries for this task such as Gensim. Your function should be able to answer whether an analogy like: \"a king is to a queen as a man is to a woman\" ($e_{king} - e_{queen} + e_{woman} \\approx e_{man}$) is true. \n",
        "\n",
        "In a perfect scenario, we would like that this analogy ( $e_{king} - e_{queen} + e_{woman}$) results in the embedding of the word \"man\". However, it does not always result in exactly the same word embedding. The result of the formula is called the expected or the predicted word embedding. In this context, \"man\" is called the true or the actual word $t$. We want to find the word $p$ in the vocabulary, where the embedding of $p$ ($e_p$) is the closest to the predicted embedding (i.e. result of the formula). Then, we can check if $p$ is the same word as the true word $t$.  \n",
        "\n",
        "You have to answer an analogy function using each embedding for both CBOW and Skipgram model. This means that for each analogy we have 6 outputs. Show the true word (with distance similarity value between predicted embedding and true word embedding, i.e. `sim1`) , the predicted word (with distance similarity value between predicted embedding and the embedding of the word in the vocabulary that is closest to this predicted embedding, i.e. `sim2`) and a boolean answer whether the predicted word **exactly** equals the true word. \n",
        "\n",
        "<b>HINT</b>: to visualize the results of the analogy tasks , you can print them in a table. An example is given below.\n",
        "\n",
        "\n",
        "| Analogy task | True word (sim1)  | Predicted word (sim2) | Embedding | Correct?|\n",
        "|------|------|------|------|------|\n",
        "|  queen is to king as woman is to ?\t | man (sim1) | predictd_word(sim2) | SG_50 | True / False|\n",
        "\n",
        "* Give at least 5 different  examples of analogies.\n",
        "* Compare the performance on the analogy s between the word embeddings and briefly discuss your results."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8rALd-jzJgs8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def embed(word, embedding, vocab_size=V, tokenizer=tokenizer):\n",
        "  int_word = tokenizer.texts_to_sequences([word])[0]\n",
        "  bin_word = to_categorical(int_word, V)\n",
        "  return np.dot(bin_word, embedding)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZAdMZSW7tJfQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def closest_word(predicted_embedding, word1_embedding, word2_embedding, word3_embedding, embedding):\n",
        "  exclude_words = [predicted_embedding, word1_embedding, word2_embedding, word3_embedding]\n",
        "  exclude_index = []\n",
        "  for i in range(V):\n",
        "    for j in exclude_words:\n",
        "      if np.array_equal(j, embedding[[i]]):\n",
        "        exclude_index.append(i)\n",
        "\n",
        "  include_index = [x for x in range(V) if x not in exclude_index]\n",
        "\n",
        "  biggest_dist = 0\n",
        "  index = 0\n",
        "  for i in include_index:  \n",
        "    each_word = embedding[[i]]\n",
        "    dist = cosine_similarity(predicted_embedding, each_word)   #sim1\n",
        "    if dist > biggest_dist:\n",
        "      biggest_dist = dist\n",
        "      index = i\n",
        "  \n",
        "  mylist = list((tokenizer.word_index.items()))\n",
        "\n",
        "  closest_word = [item[0] for item in mylist if item[1] == index]\n",
        "  # print(least_dist)\n",
        "  # print(least_dist[0][0])\n",
        "  # print(closest_word)\n",
        "  return biggest_dist[0][0], closest_word[0]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z3F4TwToLPjk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def analogy(word1, word2, word3, true_word):\n",
        "\n",
        "  analogy = word2 + ' is to ' + word1 + ' as ' + word3 + ' is to?'\n",
        "  df = pd.DataFrame(columns=['Analogy task', 'True word(sim1)', 'Predicted word(sim2)', 'Embedding', 'Correct?'])\n",
        "  models = ['new_skipgram_50', 'new_skipgram_150', 'new_skipgram_300', 'new_cbow_50', 'new_cbow_150', 'new_cbow_300']\n",
        "\n",
        "  dummy = []\n",
        "  for i, model in enumerate(models):\n",
        "    embedding = np.loadtxt(model + '.txt')\n",
        "    \n",
        "    word1_embedding = embed(word1, embedding)\n",
        "    word2_embedding = embed(word2, embedding)\n",
        "    word3_embedding = embed(word3, embedding)\n",
        "    predicted_embedding = word1_embedding - word2_embedding + word3_embedding\n",
        "\n",
        "    sim1 = cosine_similarity(predicted_embedding, embed(true_word, embedding))   #sim1 with true word\n",
        "\n",
        "    pair = closest_word(predicted_embedding, word1_embedding, word2_embedding, word3_embedding, embedding)\n",
        "    \n",
        "    predicted_word = pair[1]\n",
        "    sim2 = pair[0]\n",
        "    \n",
        "    \n",
        "    sim1 = sim1[0][0]\n",
        "    sim1 = '({val})'.format(val=sim1)\n",
        "    t_word = true_word + sim1\n",
        "    \n",
        "    \n",
        "    sim2 = '({val})'.format(val=sim2)\n",
        "    p_word = predicted_word + sim2\n",
        "\n",
        "    df.loc[i] = [analogy] + [t_word] + [p_word] + [model] + [true_word == predicted_word]\n",
        "\n",
        "  return df"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-uoXEYoFwgtK",
        "colab_type": "code",
        "outputId": "4548aa08-21cf-4a41-91b2-f26f62346616",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "analogy('king', 'queen', 'woman', 'man')"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Analogy task</th>\n",
              "      <th>True word(sim1)</th>\n",
              "      <th>Predicted word(sim2)</th>\n",
              "      <th>Embedding</th>\n",
              "      <th>Correct?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>queen is to king as woman is to?</td>\n",
              "      <td>man(-0.2276038478015453)</td>\n",
              "      <td>gravely(0.5923715329033299)</td>\n",
              "      <td>new_skipgram_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>queen is to king as woman is to?</td>\n",
              "      <td>man(0.06249644100628454)</td>\n",
              "      <td>put(0.29920029453090846)</td>\n",
              "      <td>new_skipgram_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>queen is to king as woman is to?</td>\n",
              "      <td>man(-0.007609101998291692)</td>\n",
              "      <td>wandering(0.19154930274753523)</td>\n",
              "      <td>new_skipgram_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>queen is to king as woman is to?</td>\n",
              "      <td>man(0.08018928213855467)</td>\n",
              "      <td>placed(0.43710861771951515)</td>\n",
              "      <td>new_cbow_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>queen is to king as woman is to?</td>\n",
              "      <td>man(0.0004920519664121025)</td>\n",
              "      <td>largest(0.4121158266771023)</td>\n",
              "      <td>new_cbow_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>queen is to king as woman is to?</td>\n",
              "      <td>man(0.0399959021496218)</td>\n",
              "      <td>explained(0.21571534641322504)</td>\n",
              "      <td>new_cbow_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                       Analogy task  ... Correct?\n",
              "0  queen is to king as woman is to?  ...    False\n",
              "1  queen is to king as woman is to?  ...    False\n",
              "2  queen is to king as woman is to?  ...    False\n",
              "3  queen is to king as woman is to?  ...    False\n",
              "4  queen is to king as woman is to?  ...    False\n",
              "5  queen is to king as woman is to?  ...    False\n",
              "\n",
              "[6 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5Qh1BrvlTYhV",
        "colab_type": "code",
        "outputId": "341a499d-0eca-48f2-b019-af7649799d99",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "analogy('queen', 'king', 'man', 'woman')"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Analogy task</th>\n",
              "      <th>True word(sim1)</th>\n",
              "      <th>Predicted word(sim2)</th>\n",
              "      <th>Embedding</th>\n",
              "      <th>Correct?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>king is to queen as man is to?</td>\n",
              "      <td>woman(-0.23252770702265316)</td>\n",
              "      <td>rules(0.46889891396280614)</td>\n",
              "      <td>new_skipgram_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>king is to queen as man is to?</td>\n",
              "      <td>woman(-0.007598488371288414)</td>\n",
              "      <td>naturedly(0.256658863209921)</td>\n",
              "      <td>new_skipgram_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>king is to queen as man is to?</td>\n",
              "      <td>woman(0.048878339372444554)</td>\n",
              "      <td>buttered(0.2114553936311396)</td>\n",
              "      <td>new_skipgram_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>king is to queen as man is to?</td>\n",
              "      <td>woman(-0.14613911485783895)</td>\n",
              "      <td>english(0.4718529356664387)</td>\n",
              "      <td>new_cbow_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>king is to queen as man is to?</td>\n",
              "      <td>woman(-0.051368261709452655)</td>\n",
              "      <td>called(0.2683776872715052)</td>\n",
              "      <td>new_cbow_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>king is to queen as man is to?</td>\n",
              "      <td>woman(0.0008118178352374689)</td>\n",
              "      <td>ou(0.18962929115762564)</td>\n",
              "      <td>new_cbow_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                     Analogy task  ... Correct?\n",
              "0  king is to queen as man is to?  ...    False\n",
              "1  king is to queen as man is to?  ...    False\n",
              "2  king is to queen as man is to?  ...    False\n",
              "3  king is to queen as man is to?  ...    False\n",
              "4  king is to queen as man is to?  ...    False\n",
              "5  king is to queen as man is to?  ...    False\n",
              "\n",
              "[6 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2w6b0OMgV7FL",
        "colab_type": "code",
        "outputId": "8187d7cc-23b8-42b2-842f-251e29f03219",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "# french to France as english to England\n",
        "analogy('France', 'french', 'english', 'England')"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Analogy task</th>\n",
              "      <th>True word(sim1)</th>\n",
              "      <th>Predicted word(sim2)</th>\n",
              "      <th>Embedding</th>\n",
              "      <th>Correct?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>french is to France as english is to?</td>\n",
              "      <td>England(0.24125223355026953)</td>\n",
              "      <td>yes(0.44567250243406226)</td>\n",
              "      <td>new_skipgram_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>french is to France as english is to?</td>\n",
              "      <td>England(-0.11560185770226264)</td>\n",
              "      <td>sang(0.27759691152363986)</td>\n",
              "      <td>new_skipgram_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>french is to France as english is to?</td>\n",
              "      <td>England(0.020204998217489816)</td>\n",
              "      <td>set(0.19623472163569225)</td>\n",
              "      <td>new_skipgram_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>french is to France as english is to?</td>\n",
              "      <td>England(0.1587364795641096)</td>\n",
              "      <td>queen(0.5104274020178932)</td>\n",
              "      <td>new_cbow_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>french is to France as english is to?</td>\n",
              "      <td>England(0.12060738265891705)</td>\n",
              "      <td>largest(0.2713109149132237)</td>\n",
              "      <td>new_cbow_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>french is to France as english is to?</td>\n",
              "      <td>England(0.05199762174634787)</td>\n",
              "      <td>emphasis(0.19246977079744515)</td>\n",
              "      <td>new_cbow_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                            Analogy task  ... Correct?\n",
              "0  french is to France as english is to?  ...    False\n",
              "1  french is to France as english is to?  ...    False\n",
              "2  french is to France as english is to?  ...    False\n",
              "3  french is to France as english is to?  ...    False\n",
              "4  french is to France as english is to?  ...    False\n",
              "5  french is to France as english is to?  ...    False\n",
              "\n",
              "[6 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "unC4xOwyWdvf",
        "colab_type": "code",
        "outputId": "09d2d9d3-5941-44e8-bd97-0d509b1e521f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "# forget to forgetting as remember to remembering\n",
        "analogy('forgetting', 'forget', 'remember', 'remembering')"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Analogy task</th>\n",
              "      <th>True word(sim1)</th>\n",
              "      <th>Predicted word(sim2)</th>\n",
              "      <th>Embedding</th>\n",
              "      <th>Correct?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>forget is to forgetting as remember is to?</td>\n",
              "      <td>remembering(0.05211443188003912)</td>\n",
              "      <td>should(0.45866391238009935)</td>\n",
              "      <td>new_skipgram_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>forget is to forgetting as remember is to?</td>\n",
              "      <td>remembering(0.09813824307567018)</td>\n",
              "      <td>soft(0.28183223523891876)</td>\n",
              "      <td>new_skipgram_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>forget is to forgetting as remember is to?</td>\n",
              "      <td>remembering(0.05024263594832267)</td>\n",
              "      <td>knew(0.19434047085539052)</td>\n",
              "      <td>new_skipgram_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>forget is to forgetting as remember is to?</td>\n",
              "      <td>remembering(-0.033517006490975415)</td>\n",
              "      <td>falling(0.4389744254092951)</td>\n",
              "      <td>new_cbow_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>forget is to forgetting as remember is to?</td>\n",
              "      <td>remembering(-0.0056229562366735715)</td>\n",
              "      <td>rapidly(0.2431268280102921)</td>\n",
              "      <td>new_cbow_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>forget is to forgetting as remember is to?</td>\n",
              "      <td>remembering(-0.10065309297086947)</td>\n",
              "      <td>concert(0.24454839196125186)</td>\n",
              "      <td>new_cbow_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                 Analogy task  ... Correct?\n",
              "0  forget is to forgetting as remember is to?  ...    False\n",
              "1  forget is to forgetting as remember is to?  ...    False\n",
              "2  forget is to forgetting as remember is to?  ...    False\n",
              "3  forget is to forgetting as remember is to?  ...    False\n",
              "4  forget is to forgetting as remember is to?  ...    False\n",
              "5  forget is to forgetting as remember is to?  ...    False\n",
              "\n",
              "[6 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s-czespTWuMX",
        "colab_type": "code",
        "outputId": "5dad921c-ba0e-47f0-8334-fc99afa47292",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "# hand is to leg as to eye is to ear\n",
        "analogy('knee', 'hand', 'eye', 'ear')"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Analogy task</th>\n",
              "      <th>True word(sim1)</th>\n",
              "      <th>Predicted word(sim2)</th>\n",
              "      <th>Embedding</th>\n",
              "      <th>Correct?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>hand is to knee as eye is to?</td>\n",
              "      <td>ear(0.018077064327186844)</td>\n",
              "      <td>and(0.5487155145672655)</td>\n",
              "      <td>new_skipgram_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>hand is to knee as eye is to?</td>\n",
              "      <td>ear(0.10791441386590167)</td>\n",
              "      <td>ve(0.34134533423666114)</td>\n",
              "      <td>new_skipgram_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>hand is to knee as eye is to?</td>\n",
              "      <td>ear(0.019884789315637006)</td>\n",
              "      <td>grinned(0.1870063523005117)</td>\n",
              "      <td>new_skipgram_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>hand is to knee as eye is to?</td>\n",
              "      <td>ear(-0.02892285277460819)</td>\n",
              "      <td>savage(0.4955845168734364)</td>\n",
              "      <td>new_cbow_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>hand is to knee as eye is to?</td>\n",
              "      <td>ear(-0.13143232340334135)</td>\n",
              "      <td>became(0.24781723858682847)</td>\n",
              "      <td>new_cbow_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>hand is to knee as eye is to?</td>\n",
              "      <td>ear(0.037118821885088964)</td>\n",
              "      <td>broken(0.19101458625561168)</td>\n",
              "      <td>new_cbow_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    Analogy task  ... Correct?\n",
              "0  hand is to knee as eye is to?  ...    False\n",
              "1  hand is to knee as eye is to?  ...    False\n",
              "2  hand is to knee as eye is to?  ...    False\n",
              "3  hand is to knee as eye is to?  ...    False\n",
              "4  hand is to knee as eye is to?  ...    False\n",
              "5  hand is to knee as eye is to?  ...    False\n",
              "\n",
              "[6 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D8h4tA--XFPy",
        "colab_type": "code",
        "outputId": "10b05501-9a04-4199-dd0a-1063264d76e8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "# he is to his as to she is to hers\n",
        "analogy('his', 'he', 'she', 'hers')"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Analogy task</th>\n",
              "      <th>True word(sim1)</th>\n",
              "      <th>Predicted word(sim2)</th>\n",
              "      <th>Embedding</th>\n",
              "      <th>Correct?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>he is to his as she is to?</td>\n",
              "      <td>hers(0.08654744824830708)</td>\n",
              "      <td>boots(0.4772606664530347)</td>\n",
              "      <td>new_skipgram_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>he is to his as she is to?</td>\n",
              "      <td>hers(-0.017211512858640053)</td>\n",
              "      <td>hundred(0.2588800000964449)</td>\n",
              "      <td>new_skipgram_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>he is to his as she is to?</td>\n",
              "      <td>hers(0.19537574359963647)</td>\n",
              "      <td>asleep(0.21127687059268666)</td>\n",
              "      <td>new_skipgram_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>he is to his as she is to?</td>\n",
              "      <td>hers(0.19853195528483408)</td>\n",
              "      <td>walk(0.42605192145307236)</td>\n",
              "      <td>new_cbow_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>he is to his as she is to?</td>\n",
              "      <td>hers(-0.024733441800331348)</td>\n",
              "      <td>knelt(0.27848222378582127)</td>\n",
              "      <td>new_cbow_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>he is to his as she is to?</td>\n",
              "      <td>hers(-0.05230003143064457)</td>\n",
              "      <td>repeated(0.21099997166532128)</td>\n",
              "      <td>new_cbow_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 Analogy task  ... Correct?\n",
              "0  he is to his as she is to?  ...    False\n",
              "1  he is to his as she is to?  ...    False\n",
              "2  he is to his as she is to?  ...    False\n",
              "3  he is to his as she is to?  ...    False\n",
              "4  he is to his as she is to?  ...    False\n",
              "5  he is to his as she is to?  ...    False\n",
              "\n",
              "[6 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Q7ErHY7UB2L",
        "colab_type": "code",
        "outputId": "a00a0be8-c675-4fcf-d5c3-cf19c537f17d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "analogy('he', 'his', 'hers', 'she')"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Analogy task</th>\n",
              "      <th>True word(sim1)</th>\n",
              "      <th>Predicted word(sim2)</th>\n",
              "      <th>Embedding</th>\n",
              "      <th>Correct?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>his is to he as hers is to?</td>\n",
              "      <td>she(0.1035372109282367)</td>\n",
              "      <td>reasons(0.5200583790652029)</td>\n",
              "      <td>new_skipgram_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>his is to he as hers is to?</td>\n",
              "      <td>she(0.0021037085999231903)</td>\n",
              "      <td>nearly(0.3085303368651543)</td>\n",
              "      <td>new_skipgram_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>his is to he as hers is to?</td>\n",
              "      <td>she(0.07103179553503233)</td>\n",
              "      <td>both(0.21111188745085127)</td>\n",
              "      <td>new_skipgram_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>his is to he as hers is to?</td>\n",
              "      <td>she(0.08985604441333475)</td>\n",
              "      <td>eating(0.43811119810176075)</td>\n",
              "      <td>new_cbow_50</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>his is to he as hers is to?</td>\n",
              "      <td>she(0.0760687100325127)</td>\n",
              "      <td>smallest(0.2772311222402982)</td>\n",
              "      <td>new_cbow_150</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>his is to he as hers is to?</td>\n",
              "      <td>she(0.0035515716566928007)</td>\n",
              "      <td>uneasy(0.19517951462338148)</td>\n",
              "      <td>new_cbow_300</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                  Analogy task  ... Correct?\n",
              "0  his is to he as hers is to?  ...    False\n",
              "1  his is to he as hers is to?  ...    False\n",
              "2  his is to he as hers is to?  ...    False\n",
              "3  his is to he as hers is to?  ...    False\n",
              "4  his is to he as hers is to?  ...    False\n",
              "5  his is to he as hers is to?  ...    False\n",
              "\n",
              "[6 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G6LwT4KbSY0N",
        "colab_type": "text"
      },
      "source": [
        "### Discussion:\n",
        "Studying and following the recommended paper, we used cosine similarity as our distance metric. As we know, this distance metric gives values closest to 1 if the two vectors are completely same and -1 if these are 180 degrees apart. So, closer a value is to 1, better is the similarity. We also removed the input words from our matrix because otherwise predicted word will possibly have the least distance with one of the input words.\n",
        "\n",
        "As we see from our results, none of the words have a distance greater than 0.5. As a result, predicted words are skewed from what it should be. This is because our training sample is quite small.\n",
        "\n",
        "Hence, all outputs are False or incorrect. But, we notice that the models with 50 features perform better than models with higher features for both CBOW and SKIPGRAM.\n",
        "\n",
        "We also notice that the order of the words matter. For example, `King - Queen + Woman` gives a different result than `Queen - King + Woman`. We are not sure which will be the write orientation to use.\n",
        "\n",
        "From our models, it is also not evident whether CBOW is inherently better than SKIPGRAM or vice-versa."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "5h-OWIF9AsKH"
      },
      "source": [
        "## Task 1.4 - Discussion\n",
        "Answer the following question:\n",
        "* Given the same number of sentences as input, CBOW and Skipgram arrange the data into different number of training samples. Which one has more and why?\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0ssKUZlOBNY9",
        "colab_type": "text"
      },
      "source": [
        "### Answer:\n",
        "\n",
        "Given a sentence of n unique words, and a window size of 2L for training. Skipgram will arrage 2L pairs of training samples for each word; therefore, Skipgram has 2nL training samples in total. On the other hand, CBOW uses the context words in the window differently. CBOW combines all 2L context words in the window into one traing sample; thus, CBOW has n training samples in total. The conclusion is that Skipgram has more training samples due to the way it pairs up each word with each of its context words in the window."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "mOa7EXhD-saI"
      },
      "source": [
        "# Question 2 - Peer review (0 pt):\n",
        "Finally, each group member must write a single paragraph outlining their opinion on the work distribution within the group. Did every group member\n",
        "contribute equally? Did you split up tasks in a fair manner, or jointly worked through the exercises. Do you think that some members of your group deserve a different grade from others? You can use the table below to make an overview of how the tasks were divided:\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "RWdcoJH__MqP"
      },
      "source": [
        "| Student name | Task  |\n",
        "|------|------|\n",
        "|  Huilin Zhu  | task 1.2, 1.4 |\n",
        "| Satyaki Mallick  | task 1.1|\n",
        "| everyone | task 1.3|\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9j-DzIr9keVa",
        "colab_type": "text"
      },
      "source": [
        "### Satyaki\n",
        "I worked on the Skipgram model and implementing the analogy function and the closest word function. Huilin helped in implementing excluded words and bug fixes in the analogy code.\n",
        "\n",
        "We worked together in searching the text for analogy words and deciding on how to write the discussion results."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wl4SXoGwmAjP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}